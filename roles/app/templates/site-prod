##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

upstream app_server_{{ instance_name }} {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    server unix:{{ gunicorn_socket }} fail_timeout=0;
}

# HTTP configuration, redirects to HTTPS
server {
    listen 80;
    listen [::]:80;

    server_name {{ host_name }};

    return 301 https://$host$request_uri;
}


# HTTPS configuration
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    gzip off;

    ssl_certificate     /etc/letsencrypt/live/{{ host_name }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ host_name }}/privkey.pem;

    server_name {{ host_name }};

    location / {
        proxy_pass http://app_server_{{ instance_name }};
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    root {{ static_root }};

    location /static/ {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ =404;
    }

}
