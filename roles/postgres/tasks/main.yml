- name: Install nvme-cli for EBS volume identification
  apt:
    name: nvme-cli
    update_cache: yes

- name: Copy ebsnvme-id script
  copy:
    src: ebsnvme-id.py
    dest: /usr/bin/ebsnvme-id
    mode: 0755

- name: Copy ebsnvme-nsid script
  copy:
    src: ec2nvme-nsid
    dest: /usr/bin/ec2nvme-nsid
    mode: 0755

- name: Copy udev rules for EBS
  copy:
    src: 70-ec2-nvme-devices.rules
    dest: /etc/udev/rules.d/70-ec2-nvme-devices.rules
    mode: 0644
  notify:
    - udevadm trigger block devices

- meta: flush_handlers

- name: Ensure ext4 filesystem on database volume
  filesystem:
    dev: /dev/sdd
    fstype: ext4

- mount:
    fstype: ext4
    path: /var/lib/postgresql
    src: /dev/sdd
    state: mounted

- name: Install PostgreSQL
  apt:
    name:
      - postgresql
      - libpq-dev
      - python3-psycopg2
    state: present
    update_cache: yes
    cache_valid_time: 3600

- name: Configure pg_hba
  template:
    src: pg_hba.conf
    dest: /etc/postgresql/10/main/pg_hba.conf
  notify:
    - Reload postgres

- name: Make sure pip3 is installed
  apt:
    name: python3-pip
    state: present

- name: Install AWS CLI for s3 access
  pip:
    name: awscli
    state: latest

- name: Create backup role
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ backup_user }}"
    role_attr_flags: "LOGIN"

- name: Ensure backup user exists
  user:
    name: "{{ backup_user }}"
    state: present

- name: Create backup folder
  file:
    path: /var/backups/database
    state: directory
    owner: "{{ backup_user }}"

- name: Copy backup script
  copy:
    src: backup_db.sh
    dest: /var/backups/backup_db.sh
    owner: "{{ backup_user }}"
    mode: 0500

- name: Copy backup script
  copy:
    src: upload_daily.sh
    dest: /var/backups/upload_daily.sh
    owner: "{{ backup_user }}"
    mode: 0500
